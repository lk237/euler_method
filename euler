# cs 3308 
# groupe name: Leonel Kachie Takoudjou, Alessio Naji-Sepasgozar, Minh Anh Thai

import numpy as np
import matplotlib.pyplot as plt

# Define the differential equation
def f(t, y):
    return 2 - 2 * t * y

# Initial conditions
t0 = 0
y0 = 1
h = 0.1
t_max = 1

# Calculate the number of steps
n_steps = int((t_max - t0) / h) + 1

# Initialize arrays to store the values of t and y
t_values = np.zeros(n_steps)
y_values = np.zeros(n_steps)

# Set initial values
t_values[0] = t0
y_values[0] = y0

# Euler's method loop
for i in range(1, n_steps):
    t_values[i] = t_values[i - 1] + h
    y_values[i] = y_values[i - 1] + h * f(t_values[i - 1], y_values[i - 1])

# Print the results
for i in range(n_steps):
    print(f"t_{i} = {t_values[i]:.1f}, y_{i} = {y_values[i]:.5f}")

# Plot the results
plt.plot(t_values, y_values, 'b-', marker='o')
plt.xlabel('t')
plt.ylabel('y')
plt.title('Approximate Solution using Euler\'s Method')
plt.grid(True)
plt.show()
